{"version":3,"sources":["w5.gif","ShowWeather.js","GetWeather.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ShowWeather","this","props","isLoaded","className","weather","observations","location","city","state","country","observation","description","Math","round","temperature","latitude","longitude","humidity","src","weatherImage","alt","height","width","React","Component","GetWeather","enteredCity","validated","msg","errMsg","handleInputCity","e","target","value","setState","handleSubmit","preventDefault","axios","get","then","response","data","catch","err","status","Form","noValidate","onSubmit","Group","controlId","Control","type","placeholder","name","required","onChange","Feedback","style","fontSize","color","Button","variant","App","Row","Col","xs","sm","md","lg","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4fe9b1bb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/w5.ccd3b333.gif\";","import React from \"react\"\r\nimport weatherImage from \"./w5.gif\"\r\n\r\nexport default class ShowWeather extends React.Component{\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                {this.props.isLoaded && (\r\n                    <div className=\"content\">\r\n                        <div className=\"location\">\r\n                            {this.props.isLoaded && this.props.weather.observations.location[0].city}&nbsp;\r\n                            {this.props.isLoaded && this.props.weather.observations.location[0].state}&nbsp;\r\n                            {this.props.isLoaded && this.props.weather.observations.location[0].country}\r\n                        </div>\r\n                        <div>\r\n                            <span className=\"wdesc\">{this.props.isLoaded && this.props.weather.observations.location[0].observation[0].description}</span>\r\n\r\n                        </div>\r\n                        <div >\r\n                            <span className=\"temp\">{this.props.isLoaded && Math.round(this.props.weather.observations.location[0].observation[0].temperature)}&deg;C</span><br/>\r\n                            <div className=\"weather-stats\">\r\n                                latitude:\r\n                                <span>\r\n                                    {this.props.isLoaded && this.props.weather.observations.location[0].latitude}\r\n                                </span><br/>\r\n                                longitude:\r\n                                <span>\r\n                                    {this.props.isLoaded && this.props.weather.observations.location[0].longitude}\r\n                                </span><br/>\r\n                                Humidity:\r\n                                <span>{this.props.isLoaded && Math.round(this.props.weather.observations.location[0].observation[0].humidity)}</span>\r\n                                <br/>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <img\r\n                                src={weatherImage}\r\n                                alt=\"weather\"\r\n                                height={100}\r\n                                width={250}\r\n                                />\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\"\r\nimport { Form, Button } from \"react-bootstrap\"\r\nimport axios from \"axios\"\r\nimport ShowWeather from \"./ShowWeather\"\r\n\r\nexport default class GetWeather extends React.Component{\r\n    state={\r\n        enteredCity: \"\",\r\n        validated: false,\r\n        weather: {},\r\n        isLoaded : false,\r\n        msg: \"\",\r\n        errMsg: \"\"\r\n    }\r\n\r\n    handleInputCity = (e) => {\r\n        const city = e.target.value\r\n        this.setState({ enteredCity : city})\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        !this.state.enteredCity ? this.setState({ validated : true, msg:\"Please enter your city\" }) :\r\n        axios.get(`https://cors-anywhere.herokuapp.com/https://weather.ls.hereapi.com/weather/1.0/report.json?product=observation&name=${this.state.enteredCity}&apiKey=KBGrDdHVbVkIDvB0JW2gyzkWEJAVx4j0c-nZPCOmYu4`)\r\n        .then(response => this.setState(() => ({ weather: response.data, isLoaded: true, errMsg: \"\" })))\r\n        .catch(err => err.response.status === 400 ? this.setState({errMsg: \"Invalid type: Please enter valid city\"}): null)\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Form noValidate validated={this.state.validated} onSubmit={this.handleSubmit}>\r\n                    <Form.Group controlId=\"validationCustom03\">\r\n                        <Form.Control\r\n                            type=\"text\"\r\n                            placeholder=\"search for the city\"\r\n                            name=\"city\"\r\n                            required\r\n                            width=\"80%\"\r\n                            onChange={this.handleInputCity}\r\n                            value={this.state.enteredCity}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\" style={{ fontSize: 15}}>\r\n                            {this.state.msg}\r\n                        </Form.Control.Feedback>\r\n                        <span style={{ color: \"red\"}}>{this.state.errMsg}</span>\r\n                    </Form.Group>\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                        Check Weather\r\n                    </Button>\r\n                </Form>\r\n                <div>\r\n                    <ShowWeather\r\n                        weather={this.state.weather}\r\n                        isLoaded={this.state.isLoaded}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport GetWeather from \"./GetWeather\"\nimport { Row, Col } from \"react-bootstrap\"\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <Row>\n          <Col xs={11} sm={12} md={12} lg={12} >\n            <h1 className=\"title\">Weathery</h1>\n            <h4 className=\"subtitle\">\n              Search your city, check the weather\n            </h4>\n            <GetWeather />\n          </Col>\n        </Row>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}